<script src='/js/check.js'></script>
<script src='/js/update.js'></script>
<style>
  td{
    background: green;
    width: 50px; height: 50px;
  }
  table{
    background: black;
  }
  .black{
    background: black;
    margin: auto;
    width: 40px; height: 40px;
    border-radius: 50%;
  }
  .white{
    background: white;
    margin: auto;
    width: 40px; height: 40px;
    border-radius: 50%;
  }
  .blue{
    background: blue;
    margin: auto;
    width: 40px; height: 40px;
    border-radius: 50%;
  }
  .red{
    background: red;
    margin: auto;
    width: 40px; height: 40px;
    border-radius: 50%;
  }
  .players > div{
    float: left;
  }
  .players{
    clear:both;
  }
</style>
<div id='winner'>
<% if @room.status == 'finished' %>
  <% status =  @room.turn == 'white' ? @users.first : @users.second %>
  勝者は : <%= status.user.name %>
<% end %>
</div>
<div id='turn'><%= @turn_name %></div>
<div class="players">
<div class="player">
  <div class="name"><%= @users.first.user.name %></div>
  <input type="hidden" value="<%= @users.first.user.id %>">
</div><div> vs. </div>
<div class="player">
  <div class="name"><%= @users.second ? @users.second.user.name : '' %></div>
  <input type="hidden" value="<%= @users.second ? @users.second.user.id : '' %>">   
</div>
</div>
<br />
<hr />
<% if @room.game_users.count < 2 and session[:user] and @room.game_users.first.user.id != session[:user] %>
<div id="joinBtn" onclick="join()">参戦する</div>
<% end %>
<table>
  <% for i in 0...@board_size %>
  <tr>
    <% for j in 0...@board_size %>
      <td onclick="s('<%= i %><%= j %>')"  id='<%= i %><%= j %>'></td>
    <% end %>
  </tr>
  <% end %>
</table>
<script>
const myRank = <%= session[:user] || "\'\'" %>
var countBox = document.getElementById("count");
var turnBox = document.getElementById("turn");
var player = <%= @room.status == 'finished' ? "\"\"" : @user_id || "\"\"" %>
console.log(myRank, player)
// ロード後の処理
initializeBoard = () => {
<% @stones.each do |stone| %>
  document.
    getElementsByTagName('tr')[<%= stone.y %>].
    getElementsByTagName('td')[<%= stone.x %>].innerHTML 
      = "<div class='<%= stone.color %>'></div>"
<% end %>
}

// ボードの中に入っているか判定
limitBoard = (pos) => {
  return Math.min(<%= @board_size %>, Math.max(0, pos))
}

getBoard = (x, y) => {
  table = document.getElementsByTagName('table')[0]
  return table.getElementsByTagName('tr')[y].
    getElementsByTagName('td')[x]
}

insideBoard = (x,y) => {
  if(x >= <%= @board_size %> || y >= <%= @board_size %>)return false
  if(x < 0 || y < 0)return false
  return true
}

window.onload = function(){
  initializeBoard()
  var count = new WebSocket('ws://' + window.location.host + "/websocket/<%= @room.id %>");

  // 接続が始まった時
  count.onopen = function() { count.send('{"type":"open"}'); };
  // 接続が終わった時
  count.onclose = function() { count.send('{"type":"close", "id": <%= @room.id %>}'); };
  // メッセージを受け取った時
  count.onmessage = function(m) {
    data = JSON.parse(m.data)
    console.log({type: data.type, data: data})
    if(data.type == 'board'){
      document.getElementById(data.pos).innerHTML = '<div class=' + data.turn + '></div>'
    } else if(data.type == 'turn'){
      turn = data.turn
      turnBox.innerText = turn
      players = document.getElementsByClassName('player')
      if(data.user_id != myRank && myRank != ''){
        if(!checkBoard()){ // 石が置けなかったら
          console.log('pass')
          count.send(JSON.stringify({type:'pass'}));
        }
      }
    } else if(data.type == 'join'){
      document.getElementsByClassName('player')[1]
      .getElementsByClassName('name')[0].innerText = data.name
      document.getElementsByClassName('player')[1]
      .getElementsByTagName('input')[0].value = data.id
      if(myRank == player)checkBoard()
    } else if(data.type == 'finished'){
      document.getElementById('winner').innerText = `勝者は : ${data.winner}`
      clearRed()
    } else {
      console.log(data)
    }
  }

  // ボタンが押されたら
  s = (msg) => {
    if(document.getElementById(msg).innerHTML.match('red')){
      updateBoard(parseInt(msg[1]), parseInt(msg[0]))
      count.send(JSON.stringify({type:'turn'}));
      clearRed();
    }
  }

  join = () => {
    count.send(JSON.stringify({
      type : 'join', 
      room_id: <%= @room.id %>,
      user_id: <%= session[:user] || "\"\"" %>,
    }));
    document.getElementById('joinBtn').innerHTML = ""
  }

  updateStone = (x, y, turn) => {
    pos = getBoard(x,y)
    pos.innerHTML = `<div class="${turn}"></div>`
    count.send(JSON.stringify({type:'board', pos: `${y}${x}`, turn: turn}));
  }
};
</script>